
airmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000001c6  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010c  0080010c  00000266  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002d5  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001d9  00000000  00000000  000005fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000240  00000000  00000000  000007d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00000a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001fa  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000256  00000000  00000000  00000cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  9e:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
static uint8_t data[11]={0xA5,0x5A,0x80,0x06,0x00,0xA0,0x11,0xFF,0x00,0x00,0x00};
uint8_t adc_value=0;

void USART_Init(unsigned int baud)
{
	UBRR0H = (unsigned char)(baud>>8);
  a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)baud;
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (3<<UCSZ00);
  ae:	86 e0       	ldi	r24, 0x06	; 6
  b0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  b4:	88 e9       	ldi	r24, 0x98	; 152
  b6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	sei();
  ba:	78 94       	sei
  bc:	08 95       	ret

000000be <USART_Transmit>:
}
void USART_Transmit(unsigned char data)
{
	while ( !(UCSR0A & (1<<UDRE0)) ); /* 送信緩衝部空き待機 */
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	90 81       	ld	r25, Z
  c4:	95 ff       	sbrs	r25, 5
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <USART_Transmit+0x4>
	UDR0 = data; /* ﾃﾞｰﾀ送信(送信開始) */
  c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  cc:	08 95       	ret

000000ce <USART_Send>:
}

void USART_Send(unsigned char *data,uint16_t length){
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	ec 01       	movw	r28, r24
	for (int i =0;i<length;i++)
  d8:	61 15       	cp	r22, r1
  da:	71 05       	cpc	r23, r1
  dc:	49 f0       	breq	.+18     	; 0xf0 <USART_Send+0x22>
  de:	8c 01       	movw	r16, r24
  e0:	06 0f       	add	r16, r22
  e2:	17 1f       	adc	r17, r23
	{
		USART_Transmit(*data);
  e4:	89 91       	ld	r24, Y+
  e6:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_Transmit>
	while ( !(UCSR0A & (1<<UDRE0)) ); /* 送信緩衝部空き待機 */
	UDR0 = data; /* ﾃﾞｰﾀ送信(送信開始) */
}

void USART_Send(unsigned char *data,uint16_t length){
	for (int i =0;i<length;i++)
  ea:	c0 17       	cp	r28, r16
  ec:	d1 07       	cpc	r29, r17
  ee:	d1 f7       	brne	.-12     	; 0xe4 <USART_Send+0x16>
	{
		USART_Transmit(*data);
		data++;
	}
}
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	1f 91       	pop	r17
  f6:	0f 91       	pop	r16
  f8:	08 95       	ret

000000fa <__vector_18>:

ISR(USART_RX_vect){
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	4f 93       	push	r20
 10a:	5f 93       	push	r21
 10c:	6f 93       	push	r22
 10e:	7f 93       	push	r23
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	af 93       	push	r26
 116:	bf 93       	push	r27
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
	uint8_t regVal = UDR0;
 11c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	data[8]=regVal;
 120:	e0 e0       	ldi	r30, 0x00	; 0
 122:	f1 e0       	ldi	r31, 0x01	; 1
 124:	80 87       	std	Z+8, r24	; 0x08
	data[9]=adc_value;
 126:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 12a:	81 87       	std	Z+9, r24	; 0x09
 12c:	e4 e0       	ldi	r30, 0x04	; 4
 12e:	f1 e0       	ldi	r31, 0x01	; 1
 130:	2a e0       	ldi	r18, 0x0A	; 10
 132:	31 e0       	ldi	r19, 0x01	; 1
	uint8_t sum=0;
 134:	80 e0       	ldi	r24, 0x00	; 0
	for (int i =0;i<6;i++)
	{
		sum=sum^data[4+i];
 136:	91 91       	ld	r25, Z+
 138:	89 27       	eor	r24, r25
ISR(USART_RX_vect){
	uint8_t regVal = UDR0;
	data[8]=regVal;
	data[9]=adc_value;
	uint8_t sum=0;
	for (int i =0;i<6;i++)
 13a:	e2 17       	cp	r30, r18
 13c:	f3 07       	cpc	r31, r19
 13e:	d9 f7       	brne	.-10     	; 0x136 <__vector_18+0x3c>
	{
		sum=sum^data[4+i];
	}
	data[10]=sum;
 140:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_start+0xa>
	USART_Send(data,11);
 144:	6b e0       	ldi	r22, 0x0B	; 11
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 67 00 	call	0xce	; 0xce <USART_Send>
}
 150:	ff 91       	pop	r31
 152:	ef 91       	pop	r30
 154:	bf 91       	pop	r27
 156:	af 91       	pop	r26
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	7f 91       	pop	r23
 15e:	6f 91       	pop	r22
 160:	5f 91       	pop	r21
 162:	4f 91       	pop	r20
 164:	3f 91       	pop	r19
 166:	2f 91       	pop	r18
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <ADC_Init>:

void ADC_Init(){
	ADMUX=0;
 172:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA=(1<<ADEN)|(1<<ADPS2);
 176:	84 e8       	ldi	r24, 0x84	; 132
 178:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 17c:	08 95       	ret

0000017e <ADC_Read>:
}

uint16_t ADC_Read(){
	ADCSRA|=(1<<ADSC);
 17e:	ea e7       	ldi	r30, 0x7A	; 122
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	80 64       	ori	r24, 0x40	; 64
 186:	80 83       	st	Z, r24
	while(ADCSRA&(1<<ADSC));
 188:	80 81       	ld	r24, Z
 18a:	86 fd       	sbrc	r24, 6
 18c:	fd cf       	rjmp	.-6      	; 0x188 <ADC_Read+0xa>
	return ADC;
 18e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 192:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 196:	08 95       	ret

00000198 <main>:
int main(void)
{
	USART_Init(51);
 198:	83 e3       	ldi	r24, 0x33	; 51
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	ADC_Init();
 1a0:	0e 94 b9 00 	call	0x172	; 0x172 <ADC_Init>
	/* Replace with your application code */
	while (1)
	{
		adc_value=ADC_Read()/4;
 1a4:	0e 94 bf 00 	call	0x17e	; 0x17e <ADC_Read>
 1a8:	96 95       	lsr	r25
 1aa:	87 95       	ror	r24
 1ac:	96 95       	lsr	r25
 1ae:	87 95       	ror	r24
 1b0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	8f e0       	ldi	r24, 0x0F	; 15
 1b6:	97 e2       	ldi	r25, 0x27	; 39
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <main+0x20>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x26>
 1be:	00 00       	nop
 1c0:	f1 cf       	rjmp	.-30     	; 0x1a4 <main+0xc>

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
